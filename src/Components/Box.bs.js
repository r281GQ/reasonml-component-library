// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

var Theme = /* module */[];

function spacing_to_css(param) {
  if (param >= 26868) {
    if (param >= 5994348) {
      if (param >= 5994355) {
        return /* `px */[
                25096,
                4
              ];
      } else {
        return /* `px */[
                25096,
                72
              ];
      }
    } else if (param >= 26875) {
      return /* `px */[
              25096,
              8
            ];
    } else {
      return /* `px */[
              25096,
              48
            ];
    }
  } else if (param !== 109) {
    if (param >= 115) {
      return /* `px */[
              25096,
              16
            ];
    } else {
      return /* `px */[
              25096,
              32
            ];
    }
  } else {
    return /* `px */[
            25096,
            24
          ];
  }
}

var ToCss = /* module */[/* spacing_to_css */spacing_to_css];

function convert_direction_to_padding_rule(param) {
  switch (param) {
    case 0 : 
        return Css.paddingRight;
    case 1 : 
        return Css.paddingLeft;
    case 2 : 
        return Css.paddingTop;
    case 3 : 
        return Css.paddingBottom;
    
  }
}

function createStyleSheet(value, direction) {
  var fn = convert_direction_to_padding_rule(direction);
  return Belt_Option.mapWithDefault(value, /* [] */0, (function (x) {
                if (typeof x === "number") {
                  return /* :: */[
                          Curry._1(fn, spacing_to_css(x)),
                          /* [] */0
                        ];
                } else {
                  return Belt_List.mapWithIndex(x[1], (function (index, value) {
                                switch (index) {
                                  case 0 : 
                                      return Curry._1(fn, spacing_to_css(value));
                                  case 1 : 
                                      return Css.media("(min-width: 40em)", /* :: */[
                                                  Curry._1(fn, spacing_to_css(value)),
                                                  /* [] */0
                                                ]);
                                  case 2 : 
                                      return Css.media("(min-width: 52em)", /* :: */[
                                                  Curry._1(fn, spacing_to_css(value)),
                                                  /* [] */0
                                                ]);
                                  default:
                                    return Css.media("(min-width: 64em)", /* :: */[
                                                Curry._1(fn, spacing_to_css(value)),
                                                /* [] */0
                                              ]);
                                }
                              }));
                }
              }));
}

function Box(Props) {
  var children = Props.children;
  var p = Props.p;
  var px = Props.px;
  var py = Props.py;
  var pl = Props.pl;
  var pr = Props.pr;
  var pt = Props.pt;
  var pb = Props.pb;
  var paddingTop = pt !== undefined ? pt : (
      py !== undefined ? py : (
          p !== undefined ? p : undefined
        )
    );
  var paddingBottom = pb !== undefined ? pb : (
      py !== undefined ? py : (
          p !== undefined ? p : undefined
        )
    );
  var paddingRight = pr !== undefined ? pr : (
      px !== undefined ? px : (
          p !== undefined ? p : undefined
        )
    );
  var paddingLeft = pl !== undefined ? pl : (
      px !== undefined ? px : (
          p !== undefined ? p : undefined
        )
    );
  var leftResult = Css.style(createStyleSheet(paddingLeft, /* Left */1));
  var rightResult = Css.style(createStyleSheet(paddingRight, /* Right */0));
  var topResult = Css.style(createStyleSheet(paddingTop, /* Top */2));
  var bottomResult = Css.style(createStyleSheet(paddingBottom, /* Bottom */3));
  var finalResult = Css.merge(/* :: */[
        leftResult,
        /* :: */[
          rightResult,
          /* :: */[
            topResult,
            /* :: */[
              bottomResult,
              /* [] */0
            ]
          ]
        ]
      ]);
  return React.createElement("div", {
              className: finalResult
            }, children);
}

var make = Box;

exports.Theme = Theme;
exports.ToCss = ToCss;
exports.convert_direction_to_padding_rule = convert_direction_to_padding_rule;
exports.createStyleSheet = createStyleSheet;
exports.make = make;
/* Css Not a pure module */
